# ‚≠ï
# # üü† 
# # ‚ö™Ô∏ècls
# # üü¢
# class Computadora:
#     def __init__(self, lista_colores):
#         self.__lista_colores = lista_colores
#         self.__codigo_secreto = random.choices(self.__lista_colores, k=4)


#     @property
#     def lista_colores(self):
#         return self.__lista_colores

#     @property
#     def dificultad(self):
#         return self.__dificultad

#     def generar_codigo(self):
#         return input("Ingresa los colores separados por comas (ejemplo: red,blue,green,yellow): ")
    

#     def adivinar_codigo(self, tablero, codigo_de_juego, intentos, restante_intentos):
#         if self.__dificultad == 1:
#             # Estrategia f√°cil: generar combinaciones aleatorias
#             self.__codigo_secreto = random.choices(self.__lista_colores, k=4)
#         elif self.__dificultad == 2:
#             # Estrategia media: adivinanza inteligente b√°sica (por ejemplo, generar combinaciones basadas en patrones)
#             self.__codigo_secreto = self.adivinanza_media(tablero, codigo_de_juego)
#         elif self.__dificultad == 3:
#             # Estrategia alta: fuerza bruta
#             self.__codigo_secreto = self.adivinanza_fuerza_bruta(tablero, codigo_de_juego)

#         if self.__codigo_secreto == codigo_de_juego:
#             print(f'\n{green}Has perdido! la maquina ha adivinado el c√≥digo en {intentos} intentos.{reset}')
#             print(f'La combinaci√≥n de colores era {codigo_de_juego}')
#             return True
#         else:
#             print(f'\n{red}Intento incorrecto. {restante_intentos} intentos restantes.{reset}')
#             print(f'Su √∫ltimo movimiento fue {green}{self.__codigo_secreto}{reset}\n')
                
#             if restante_intentos <= 1:
#                 print("Ganaste, la maquina no ha logrado adivinar!")
#                 return True
#         tablero.actualizar_tablero(self.__codigo_secreto)
#         return False

#     def adivinanza_media(self, tablero, codigo_de_juego):
#         posibles_codigos = [list(comb) for comb in itertools.product(self.__lista_colores, repeat=4)]
#         for codigo in posibles_codigos:
#             if codigo != self.__codigo_secreto:
#                 return codigo
#         return random.choices(self.__lista_colores, k=4)

#     def adivinanza_fuerza_bruta(self, tablero, codigo_de_juego):
#         posibles_codigos = [list(comb) for comb in itertools.product(self.__lista_colores, repeat=4)]
#         for codigo in posibles_codigos:
#             if codigo == codigo_de_juego:
#                 return codigo
#         return random.choices(self.__lista_colores, k=4)